<style lang="less">

    .white-bg{
        position: fixed;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        background:white;
        z-index: 9998;
    }
    .icon-loading{
        width: 120rpx;
        height: 150rpx;
    }
    .spinner {
 
  width: 70px;
  height: 60px;
  text-align: center;
  font-size: 10px;
     position: fixed;
        left: 50%;
        top: 50%;
        transform:translate3d(-50%,-50%,0);
        z-index: 9999;
}
 
.spinner > view {
  background-color: #67CF22;
  height: 100%;
  width: 6px;
  display: inline-block;
  margin-left:6px;
  -webkit-animation: stretchdelay 1.2s infinite ease-in-out;
  animation: stretchdelay 1.2s infinite ease-in-out;
}
 
.spinner .rect2 {
  -webkit-animation-delay: -1.1s;
  animation-delay: -1.1s;
}
 
.spinner .rect3 {
  -webkit-animation-delay: -1.0s;
  animation-delay: -1.0s;
}
 
.spinner .rect4 {
  -webkit-animation-delay: -0.9s;
  animation-delay: -0.9s;
}
 
.spinner .rect5 {
  -webkit-animation-delay: -0.8s;
  animation-delay: -0.8s;
}
 
@-webkit-keyframes stretchdelay {
  0%, 40%, 100% { -webkit-transform: scaleY(0.4) } 
  20% { -webkit-transform: scaleY(1.0) }
}
 
@keyframes stretchdelay {
  0%, 40%, 100% {
    transform: scaleY(0.4);
    -webkit-transform: scaleY(0.4);
  }  20% {
    transform: scaleY(1.0);
    -webkit-transform: scaleY(1.0);
  }
}
</style>
<template>
    <view class="white-bg" wx:if="{{firstLoading}}"></view>
    <view class="load"   wx:if="{{loading}}">
            <view class="spinner">
            <view class="rect1"></view>
            <view class="rect2"></view>
            <view class="rect3"></view>
            <view class="rect4"></view>
            <view class="rect5"></view>
            </view>
    </view>
</template>
<script>
    import wepy from 'wepy'
    export default class loading extends wepy.component {
        props = {
          
        };
        data = {
            firstLoading: false,
            loading: false
        };
        events = {
            'loading': (data)=>{
                this.loading = data;
            },
            'firstLoading': (data)=>{
                this.firstLoading = data;
            }
        };
        methods = {
            
        };
        onLoad () {
        }
    }
</script>